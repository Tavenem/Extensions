name: publish
on:
  push:
    branches: [ main ]
jobs:
  build:
    name: build, pack, publish, and release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup .NET 5
        uses: actions/setup-dotnet@v1
        with:
          # Semantic version range syntax or exact version of a dotnet version
          dotnet-version: '5.x'

      - name: Publish on version change
        id: publish_nuget
        uses: brandedoutcast/publish-nuget@v2
        with:
          # Filepath of the project to be packaged, relative to root of repository
          PROJECT_FILE_PATH: src/Tavenem.Extensions.csproj
          
          # NuGet package id, used for version detection & defaults to project name
          PACKAGE_NAME: Tavenem.Extensions

          # API key to authenticate with NuGet server
          NUGET_KEY: ${{ secrets.NUGET_API_KEY }}

          # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
          INCLUDE_SYMBOLS: true

      - name: Release
        if: ${{ success() && steps.publish_nuget.outputs.VERSION != '' && steps.publish_nuget.outputs.VERSION != null }}
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.publish_nuget.outputs.VERSION }}
          release_name: Release ${{ steps.publish_nuget.outputs.VERSION }}
          draft: false
          prerelease: false
          body: See [release notes](docs/RELEASE_NOTES.md)

      - name: Upload package to release
        if: ${{ success() && steps.create_release.outputs.upload_url != '' && steps.create_release.outputs.upload_url != null }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.publish_nuget.outputs.PACKAGE_PATH }}
          asset_name: ${{ steps.publish_nuget.outputs.PACKAGE_NAME }}
          asset_content_type: application/zip